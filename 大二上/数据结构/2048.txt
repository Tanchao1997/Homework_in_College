// consoleApplication4.cpp: 定义控制台应用程序的入口点。
//

//#include "stdafx.h"
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define maxlen 500 
int table[4][4] = { 0 };
void place(int loc, int num)
{
	int line = (loc - 1) / 4;
	int que = (loc - 1) % 4;
	if (table[line][que] == 0)
		table[line][que] = num;
	else
		place(loc % 16 + 1, num);
}
void up_remove()
{
	int i, j, k;
	for (j = 0; j < 4; j++)
	{
		for (i = 1; i < 4; i++)
		{
			k = i;
			while (k - 1 >= 0 && table[k - 1][j] == 0)
			{
				//上面的那个为空      
				int ans = table[k][j];
				table[k][j] = table[k - 1][j];
				table[k - 1][j] = ans;
				//swap(table[k][j], table[k   - 1][j]);
				k--;
			}
		}
	}
}
void  down_remove()
{
	int i, j, k;
	for (j = 0; j<4; j++)
	{
		for (i = 2; i >= 0; i--)
		{
			k = i;
			while (k + 1 <= 3 && table[k + 1][j] == 0)
			{
				//下面的那个为空      
				int ans = table[k][j];
				table[k][j] = table[k + 1][j];
				table[k + 1][j] = ans;
				//swap(table[k][j], table[k   + 1][j]);
				k++;
			}
		}
	}
}
void  left_remove()
{
	int i, j, k;
	for (i = 0; i < 4; i++)
	{
		for (j = 1; j < 4; j++)
		{
			k = j;
			//一定要是while    
			while (k - 1 >= 0 && table[i][k - 1] == 0)
			{
				//左边的那个为空      
				int ans = table[i][k];
				table[i][k] = table[i][k - 1];
				table[i][k - 1] = ans;
				//swap(table[i][k], table[i][k   - 1]);
				k--;
			}
		}
	}
}
void  right_remove()
{
	int i, j, k;
	for (i = 0; i<4; i++)
	{
		for (j = 2; j >= 0; j--)
		{
			k = j;
			while (k + 1 <= 3 && table[i][k + 1] == 0)
			{
				//右边的那个为空    
				int ans = table[i][k];
				table[i][k] = table[i][k + 1];
				table[i][k + 1] = ans;
				//swap(table[i][k], table[i][k   + 1]);
				k++;
			}
		}
	}
}
void  left()
{
	int i, j;
	for (i = 0; i < 4; i++)
	{
		for (j = 0; j < 3; j++)
		{
			//printf("%d %d\n", i, j);
			//if (table[i][j+1] == 0) break;
			if (table[i][j] == table[i][j + 1] && table[i][j + 1] != 0)
			{
				table[i][j] *= 2;
				table[i][j + 1] = 0;
				left_remove();
			}
		}
	}
}
void  right()
{
	int i, j;
	for (i = 0; i < 4; i++)
	{
		for (j = 3; j >= 1; j--)
		{
			if (table[i][j] == table[i][j - 1] && table[i][j] != 0)
			{
				table[i][j] += table[i][j - 1];
				table[i][j - 1] = 0;
				right_remove();
			}
		}
	}
}
void  up()
{
	int i, j;
	for (j = 0; j < 4; j++)
	{
		//每一列      
		for (i = 0; i < 3; i++)
		{
			if (table[i][j] == table[i + 1][j] && table[i][j] != 0)
			{
				table[i][j] = table[i][j] + table[i + 1][j];
				table[i + 1][j] = 0;
				//移除空格    
				up_remove();
			}
		}
	}
}
void  down()
{
	int i, j;
	for (j = 0; j < 4; j++)
	{
		//每一列      
		for (i = 3; i >= 1; i--)
		{
			if (table[i][j] == table[i - 1][j] && table[i][j] != 0)
			{
				table[i][j] = table[i][j] + table[i - 1][j];
				table[i - 1][j] = 0;
				//移除空格    
				down_remove();
			}
		}
	}
}
int main()
{
	int i, j;
	for (i = 0; i < 4; i++)
		for (j = 0; j < 4; j++)
			scanf("%d", &table[i][j]);
	char ope[maxlen] = { '\0' };
	getchar();
	gets(ope);
	int top = 0;
	int loc, num;
	int length = strlen(ope);
	while (top<length)
	{
		//printf("Operate!\n");
		loc = ope[top + 2] - '0';
		num = ope[top + 4] - '0';
		if (ope[top] == 'a')
			{
				left_remove();
				left();
				place(loc, num);
			}
		//case 's':
		else if (ope[top] == 's')
		{
			//printf("DOWN\n");
			down_remove();
			down();
			place(loc, num);
		}
		//case 'd':
		else if (ope[top] == 'd')
		{
			//printf("RIGHT\n");
			right_remove();
			right();
			place(loc, num);
		}
		//case 'w':
		else if (ope[top] == 'w')
		{
			//printf("UP\n");
			up_remove();
			up();
			place(loc, num);
		}
		else;
		top += 6;
	}		//printf("Operate over!\n");

	for (i = 0; i<4; i++)
		for (j = 0; j < 4; j++)
		{
			printf("%d", table[i][j]);
			if (i == 3 && j == 3) printf("\n");
			else printf(" ");
		}
	//system("pause");
}